/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes rapid prototyping by granting broad access while requiring user authentication.
 * It does not enforce strict data validation but focuses on securing data based on user identity.
 *
 * Data Structure:
 * The database contains two top-level collections: `events` and `registrations`.
 *
 * Key Security Decisions:
 * - Authenticated users can read and write all data.
 * - Data validation is minimal, focusing only on authentication and basic ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows any authenticated user to read and write events.
     * @path /events/{eventId}
     * @allow (get, list) - Any authenticated user can read events.
     * @allow (create, update, delete) - Any authenticated user can create, update, or delete events.
     * @deny (none) - No requests are explicitly denied due to authentication requirement.
     * @principle Allows authenticated users to manage events freely for prototyping.
     */
    match /events/{eventId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows any authenticated user to read and write registrations.
     * @path /registrations/{registrationId}
     * @allow (get, list) - Any authenticated user can read registrations.
     * @allow (create, update, delete) - Any authenticated user can create, update, or delete registrations.
     * @deny (none) - No requests are explicitly denied due to authentication requirement.
     * @principle Allows authenticated users to manage registrations freely for prototyping.
     */
    match /registrations/{registrationId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    // Helper function to check if a user is signed in.
    function isSignedIn() {
      return request.auth != null;
    }
  }
}