/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset allows all logged-in users to read and write any data.
 *
 * Data Structure:
 * The Firestore database contains two top-level collections: 'events' and 'registrations'.
 *  - /events/{eventId}: Stores event details.
 *  - /registrations/{registrationId}: Stores registration information.
 *
 * Key Security Decisions:
 * - All read and write permissions are granted to authenticated users.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants all read and write permissions to authenticated users for events.
     * @path /events/{eventId}
     * @allow (get, list) User is logged in.
     * @allow (create, update, delete) User is logged in.
     * @deny (create, update, delete) User is not logged in.
     * @principle Allows any logged-in user to read and write event data.
     */
    match /events/{eventId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Grants all read and write permissions to authenticated users for registrations.
     * @path /registrations/{registrationId}
     * @allow (get, list) User is logged in.
     * @allow (create, update, delete) User is logged in.
     * @deny (create, update, delete) User is not logged in.
     * @principle Allows any logged-in user to read and write registration data.
     */
    match /registrations/{registrationId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    function isSignedIn() {
      return request.auth != null;
    }
  }
}