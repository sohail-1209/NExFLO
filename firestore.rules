/**
 * @fileoverview Firestore Security Rules for the event registration application.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access by enforcing strict ownership for event registrations.
 * All registrations are publicly readable, but only authenticated users can create registrations.
 * Modification and deletion of registrations are disallowed to maintain data integrity.
 *
 * Data Structure:
 * - /events/{eventId}: Stores event information.
 * - /registrations/{registrationId}: Stores user registrations for events.
 *
 * Key Security Decisions:
 * - Public Read Access for Events: Events are publicly readable to facilitate discovery and registration.
 * - Registrations are publicly readable, but only authenticated users can create registrations.
 * - No User Listing: Listing all users is explicitly denied for privacy.
 *
 * Denormalization for Authorization:
 *  N/A - There is no denormalized data in this rule set.
 *
 * Structural Segregation:
 * N/A - There is no structural segregation in this rule set.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants public read access to events and restricts write access.
     * @path /events/{eventId}
     * @allow (get, list): Any user can read event details.
     * @allow (create): No one can create an event through the client.
     * @deny (create, update, delete): No one can create, update, or delete an event.
     * @principle Allows public read access while restricting write access.
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Grants public read access to registrations and restricts write access. Only authenticated users can create a registration.
     * @path /registrations/{registrationId}
     * @allow (get, list): Any user can read registration details.
     * @allow (create): Only authenticated users can create a registration.
     * @deny (update, delete): No one can update or delete a registration.
     * @principle Restricts modification and deletion of registrations.
     */
    match /registrations/{registrationId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }
  }
}